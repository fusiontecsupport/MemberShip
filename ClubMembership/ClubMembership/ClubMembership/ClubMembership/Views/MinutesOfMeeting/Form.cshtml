@model ClubMembership.Models.MinutesOfMeeting
@using System.Linq
@using System.Collections.Generic
@{
    ViewBag.Title = Model.MomId == 0 ? "Create Minutes" : "Edit Minutes";
}

@using (Html.BeginForm("Form","MinutesOfMeeting", FormMethod.Post, new { id = "momForm", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.MomId)
    <div class="container-fluid mt-3">
        <div class="card shadow-sm">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h4 class="mb-0">@ViewBag.Title</h4>
                <div>
                    <a href="@Url.Action("Index")" class="btn btn-sm btn-outline-secondary"><i class="fa fa-arrow-left"></i> Back</a>
                    <button type="submit" class="btn btn-sm btn-success"><i class="fa fa-save"></i> Save</button>
                </div>
            </div>
            <div class="card-body">
                @Html.ValidationSummary(true, "", new { @class = "text-danger mb-3" })

                <div class="row g-3">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Heading)
                            @Html.TextBoxFor(m => m.Heading, new { @class = "form-control", placeholder = "Enter meeting heading" })
                            @Html.ValidationMessageFor(m => m.Heading, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Caption)
                            @Html.TextBoxFor(m => m.Caption, new { @class = "form-control", placeholder = "Short caption/subtitle" })
                            @Html.ValidationMessageFor(m => m.Caption, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-12">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Description)
                            @Html.TextAreaFor(m => m.Description, 5, 60, new { @class = "form-control", placeholder = "Describe agenda, key points, and decisions" })
                            @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-12"><hr /></div>

                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(m => m.MeetingDateAndTime)
                            @Html.TextBoxFor(m => m.MeetingDateAndTime, "{0:yyyy-MM-ddTHH:mm}", new { @class = "form-control", type = "datetime-local" })
                            @Html.ValidationMessageFor(m => m.MeetingDateAndTime, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(m => m.MeetingPlace)
                            @Html.TextBoxFor(m => m.MeetingPlace, new { @class = "form-control", placeholder = "Venue / Location" })
                            @Html.ValidationMessageFor(m => m.MeetingPlace, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(m => m.ConductedBy)
                            @Html.TextBoxFor(m => m.ConductedBy, new { @class = "form-control", placeholder = "Name of the conductor" })
                            @Html.ValidationMessageFor(m => m.ConductedBy, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(m => m.OrganizedBy)
                            @Html.TextBoxFor(m => m.OrganizedBy, new { @class = "form-control", placeholder = "Organizer / Department" })
                            @Html.ValidationMessageFor(m => m.OrganizedBy, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(m => m.MembersAttended)
                            @Html.TextBoxFor(m => m.MembersAttended, new { @class = "form-control", placeholder = "e.g., 25" })
                            @Html.ValidationMessageFor(m => m.MembersAttended, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(m => m.MembersInvited)
                            @Html.TextBoxFor(m => m.MembersInvited, new { @class = "form-control", placeholder = "e.g., 40" })
                            @Html.ValidationMessageFor(m => m.MembersInvited, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-12"><hr /></div>

                    <div class="col-12">
                        <div class="form-group">
                            <label class="form-label">Category Types</label>
                            <div class="border rounded p-3" style="max-height: 220px; overflow-y: auto;">
                                @if (ViewBag.CategoryTypes != null)
                                {
                                    var categoryTypes = ViewBag.CategoryTypes as IEnumerable<dynamic>;
                                    var selectedCategories = !string.IsNullOrEmpty(Model.CategoryTypeIds)
                                        ? Model.CategoryTypeIds.Split(',').Select(x => x.Trim()).Where(x => !string.IsNullOrEmpty(x)).Select(int.Parse).ToList()
                                        : new List<int>();
                                    if (categoryTypes != null)
                                    {
                                    foreach (var category in categoryTypes)
                                    {
                                        int id = (int)category.CateTid;
                                        string desc = (string)category.CateTDesc;
                                        bool isChecked = selectedCategories.Contains(id);
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox"
                                                   name="selectedCategoryIds"
                                                   value="@id"
                                                   id="category_@id"
                                                   @(isChecked ? "checked" : "") />
                                            <label class="form-check-label" for="category_@id">@desc</label>
                                        </div>
                                    }
                                    }
                                    else
                                    {
                                        <p class="text-muted small mb-0">No categories available</p>
                                    }
                                }
                                else
                                {
                                    <p class="text-muted small mb-0">No categories available</p>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="col-12"><hr /></div>

                    <!-- Attachments (max 3 files: JPG, PNG, PDF) -->
                    <div class="col-12">
                        <div class="form-group">
                            <label class="form-label">Attachments (up to 3 files: JPG, PNG, PDF | 2 MB each, 6 MB total)</label>
                            <div class="row g-2">
                                <div class="col-md-4">
                                    <input type="file" name="Attachment1" id="Attachment1" class="form-control" accept=".jpg,.jpeg,.png,.pdf" />
                                </div>
                                <div class="col-md-4">
                                    <input type="file" name="Attachment2" id="Attachment2" class="form-control" accept=".jpg,.jpeg,.png,.pdf" />
                                </div>
                                <div class="col-md-4">
                                    <input type="file" name="Attachment3" id="Attachment3" class="form-control" accept=".jpg,.jpeg,.png,.pdf" />
                                </div>
                            </div>
                            <small class="text-muted">Allowed types: JPG, PNG, PDF. Max 2 MB per file, 6 MB total. Uploading a new file will replace the existing one.</small>
                        </div>
                    </div>

                    @if (Model != null && Model.MomId != 0 && (!string.IsNullOrWhiteSpace(Model.Attachment1Path) || !string.IsNullOrWhiteSpace(Model.Attachment2Path) || !string.IsNullOrWhiteSpace(Model.Attachment3Path)))
                    {
                        <div class="col-12">
                            <div class="card card-body border-0 shadow-sm">
                                <h6 class="mb-3">Existing Attachments</h6>
                                <div class="row g-3">
                                    @{
                                        Func<string, string> normalizeUrl = (p) => {
                                            var normalizedPath = p;
                                            if (!string.IsNullOrWhiteSpace(normalizedPath))
                                            {
                                                if (normalizedPath.StartsWith("~/")) normalizedPath = normalizedPath.Substring(2);
                                                else if (normalizedPath.StartsWith("/")) normalizedPath = normalizedPath.Substring(1);
                                                normalizedPath = normalizedPath.TrimStart('~', '/');
                                            }
                                            return "/sngs/" + normalizedPath;
                                        };
                                    }
                                    @if (!string.IsNullOrWhiteSpace(Model.Attachment1Path))
                                    {
                                        var url1 = normalizeUrl(Model.Attachment1Path);
                                        bool isPdf1 = (Model.Attachment1Path ?? "").ToLower().EndsWith(".pdf");
                                        <div class="col-md-4">
                                            <div class="border rounded p-2 text-center">
                                                <div class="mb-2">
                                                    @if (isPdf1)
                                                    {
                                                        <div class="d-flex align-items-center justify-content-center" style="height:140px; background:#f8f9fa; border:1px solid #dee2e6; border-radius:0.375rem;">
                                                            <div class="text-center">
                                                                <i class="fa fa-file-pdf-o fa-3x text-danger mb-2"></i>
                                                                <div class="small text-muted">PDF File</div>
                                                            </div>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <img src="@url1" class="img-fluid border rounded" style="max-height:140px; width:100%; object-fit:cover; background:#f8f9fa" alt="Attachment 1 Preview" />
                                                    }
                                                </div>
                                                <div class="mb-2">
                                                    @if (isPdf1)
                                                    {
                                                        <a href="@url1" target="_blank" rel="noopener" class="btn btn-outline-primary btn-sm"><i class="fa fa-file-pdf-o me-1"></i> Download PDF</a>
                                                    }
                                                    else
                                                    {
                                                        <a href="@url1" target="_blank" rel="noopener">
                                                            <span class="btn btn-outline-success btn-sm"><i class="fa fa-eye me-1"></i> View Image</span>
                                                        </a>
                                                    }
                                                </div>
                                                <button type="button" class="btn btn-danger btn-sm" onclick="deleteAttachment(@Model.MomId, 1, this)">
                                                    <i class="fa fa-trash me-1"></i> Delete
                                                </button>
                                            </div>
                                        </div>
                                    }
                                    @if (!string.IsNullOrWhiteSpace(Model.Attachment2Path))
                                    {
                                        var url2 = normalizeUrl(Model.Attachment2Path);
                                        bool isPdf2 = (Model.Attachment2Path ?? "").ToLower().EndsWith(".pdf");
                                        <div class="col-md-4">
                                            <div class="border rounded p-2 text-center">
                                                <div class="mb-2">
                                                    @if (isPdf2)
                                                    {
                                                        <div class="d-flex align-items-center justify-content-center" style="height:140px; background:#f8f9fa; border:1px solid #dee2e6; border-radius:0.375rem;">
                                                            <div class="text-center">
                                                                <i class="fa fa-file-pdf-o fa-3x text-danger mb-2"></i>
                                                                <div class="small text-muted">PDF File</div>
                                                            </div>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <img src="@url2" class="img-fluid border rounded" style="max-height:140px; width:100%; object-fit:cover; background:#f8f9fa" alt="Attachment 2 Preview" />
                                                    }
                                                </div>
                                                <div class="mb-2">
                                                    @if (isPdf2)
                                                    {
                                                        <a href="@url2" target="_blank" rel="noopener" class="btn btn-outline-primary btn-sm"><i class="fa fa-file-pdf-o me-1"></i> Download PDF</a>
                                                    }
                                                    else
                                                    {
                                                        <a href="@url2" target="_blank" rel="noopener">
                                                            <span class="btn btn-outline-success btn-sm"><i class="fa fa-eye me-1"></i> View Image</span>
                                                        </a>
                                                    }
                                                </div>
                                                <button type="button" class="btn btn-danger btn-sm" onclick="deleteAttachment(@Model.MomId, 2, this)">
                                                    <i class="fa fa-trash me-1"></i> Delete
                                                </button>
                                            </div>
                                        </div>
                                    }
                                    @if (!string.IsNullOrWhiteSpace(Model.Attachment3Path))
                                    {
                                        var url3 = normalizeUrl(Model.Attachment3Path);
                                        bool isPdf3 = (Model.Attachment3Path ?? "").ToLower().EndsWith(".pdf");
                                        <div class="col-md-4">
                                            <div class="border rounded p-2 text-center">
                                                <div class="mb-2">
                                                    @if (isPdf3)
                                                    {
                                                        <div class="d-flex align-items-center justify-content-center" style="height:140px; background:#f8f9fa; border:1px solid #dee2e6; border-radius:0.375rem;">
                                                            <div class="text-center">
                                                                <i class="fa fa-file-pdf-o fa-3x text-danger mb-2"></i>
                                                                <div class="small text-muted">PDF File</div>
                                                            </div>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <img src="@url3" class="img-fluid border rounded" style="max-height:140px; width:100%; object-fit:cover; background:#f8f9fa" alt="Attachment 3 Preview" />
                                                    }
                                                </div>
                                                <div class="mb-2">
                                                    @if (isPdf3)
                                                    {
                                                        <a href="@url3" target="_blank" rel="noopener" class="btn btn-outline-primary btn-sm"><i class="fa fa-file-pdf-o me-1"></i> Download PDF</a>
                                                    }
                                                    else
                                                    {
                                                        <a href="@url3" target="_blank" rel="noopener">
                                                            <span class="btn btn-outline-success btn-sm"><i class="fa fa-eye me-1"></i> View Image</span>
                                                        </a>
                                                    }
                                                </div>
                                                <button type="button" class="btn btn-danger btn-sm" onclick="deleteAttachment(@Model.MomId, 3, this)">
                                                    <i class="fa fa-trash me-1"></i> Delete
                                                </button>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }

                    <div class="col-12"><hr /></div>
                </div>
            </div>
            <div class="card-footer d-flex justify-content-end gap-2">
                <a href="@Url.Action("Index")" class="btn btn-outline-secondary"><i class="fa fa-arrow-left"></i> Back</a>
                <button type="submit" class="btn btn-success"><i class="fa fa-save"></i> Save</button>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>

        $(function () {
            $('#momForm').off('submit.categoryRequired').on('submit.categoryRequired', function (e) {
                var anyChecked = $('input[name="selectedCategoryIds"]:checked').length > 0;
                if (!anyChecked) {
                    e.preventDefault();
                    alert('Please select the category type');
                    var first = $('input[name="selectedCategoryIds"]').first();
                    if (first.length) first.focus();
                    return false;
                }
                return true;
            });
        });

        (function(){
            function bytesToMB(b){ return (b / (1024*1024)); }
            var maxEach = 2 * 1024 * 1024; // 2MB
            var maxTotal = 6 * 1024 * 1024; // 6MB
            var allowed = ['.jpg', '.jpeg', '.png', '.pdf'];

            function validateFiles(showAlert){
                var f1 = document.getElementById('Attachment1').files[0];
                var f2 = document.getElementById('Attachment2').files[0];
                var f3 = document.getElementById('Attachment3').files[0];
                var files = [f1, f2, f3].filter(Boolean);
                var total = 0;
                for (var i=0;i<files.length;i++){
                    var f = files[i];
                    total += f.size;
                    var ext = (f.name.split('.').pop() || '').toLowerCase();
                    if (['jpg','jpeg','png','pdf'].indexOf(ext) === -1){
                        if (showAlert) alert('Only JPG, PNG, or PDF files are allowed.');
                        return false;
                    }
                    if (f.size > maxEach){
                        if (showAlert) alert('Each attachment must be 2 MB or less.');
                        return false;
                    }
                }
                if (total > maxTotal){
                    if (showAlert) alert('Total size of attachments must be 6 MB or less.');
                    return false;
                }
                return true;
            }

            ['Attachment1','Attachment2','Attachment3'].forEach(function(id){
                var el = document.getElementById(id);
                if (el){ el.addEventListener('change', function(){ validateFiles(true); }); }
            });

            var form = document.getElementById('momForm');
            if (form){
                form.addEventListener('submit', function(e){
                    if (!validateFiles(true)){
                        e.preventDefault();
                        return false;
                    }
                });
            }
        })();

        function deleteAttachment(momId, attachmentSlot, button) {
            if (confirm('Are you sure you want to delete this attachment?')) {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("DeleteAttachment")',
                    data: { momId: momId, attachmentSlot: attachmentSlot },
                    success: function (data) {
                        if (data.success) {
                            $(button).closest('.col-md-4').remove();
                        } else {
                            alert('Failed to delete attachment: ' + (data.message || 'Unknown error'));
                        }
                    },
                    error: function(xhr, status, error) {
                        alert('Error deleting attachment: ' + error);
                    }
                });
            }
        }
    </script>
}
