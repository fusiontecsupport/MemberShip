@model ClubMembership.Models.AccountViewModels.RegisterViewModel
@{
    ViewBag.Title = "User Registration";
    Layout = "~/Views/Shared/_Login.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>@ViewBag.Title</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #4361ee;
            --secondary-color: #3f37c9;
            --light-color: #f8f9fa;
            --dark-color: #212529;
            --success-color: #4cc9f0;
            --danger-color: #f72585;
        }

        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 1rem;
        }

        .auth-container {
            width: 100%;
            max-width: 900px;
            background: white;
            border-radius: 16px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            margin: 1rem;
        }

        .auth-header {
            background: var(--primary-color);
            color: white;
            padding: 1.5rem;
            text-align: center;
        }

            .auth-header h2 {
                font-weight: 600;
                margin-bottom: 0.5rem;
                font-size: 1.5rem;
            }

        .auth-body {
            padding: 1.5rem;
        }

        .form-section {
            margin-bottom: 1.5rem;
        }

        .section-title {
            color: var(--primary-color);
            font-weight: 600;
            margin-bottom: 1rem;
            position: relative;
            padding-bottom: 0.5rem;
            font-size: 1.1rem;
        }

            .section-title:after {
                content: '';
                position: absolute;
                bottom: 0;
                left: 0;
                width: 40px;
                height: 3px;
                background: var(--primary-color);
                border-radius: 3px;
            }

        .form-label {
            font-weight: 500;
            color: var(--dark-color);
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
        }

        .form-control, .form-select {
            padding: 0.65rem 0.9rem;
            border-radius: 8px;
            border: 1px solid #e0e0e0;
            transition: all 0.3s;
            font-size: 0.9rem;
        }

            .form-control:focus, .form-select:focus {
                border-color: var(--primary-color);
                box-shadow: 0 0 0 0.25rem rgba(67, 97, 238, 0.25);
            }

        .btn {
            padding: 0.65rem 1.25rem;
            font-size: 0.9rem;
            font-weight: 500;
        }

        .btn-primary {
            background: linear-gradient(135deg, #4361ee 0%, #3f37c9 100%);
            border: none;
            border-radius: 10px;
            box-shadow: 0 8px 20px rgba(63, 55, 201, 0.25);
            transition: transform 0.15s ease, box-shadow 0.15s ease, background 0.2s ease;
        }

            .btn-primary:hover {
                transform: translateY(-1px);
                box-shadow: 0 12px 24px rgba(63, 55, 201, 0.35);
                background: linear-gradient(135deg, #3f37c9 0%, #4361ee 100%);
            }

            .btn-primary:active {
                transform: translateY(0);
                box-shadow: 0 6px 16px rgba(63, 55, 201, 0.2);
            }

            .btn-primary:focus-visible {
                outline: 3px solid rgba(67, 97, 238, 0.35);
                outline-offset: 2px;
            }

        .btn-outline-secondary {
            border: 1px solid var(--primary-color);
            color: var(--primary-color);
            border-radius: 10px;
            transition: all 0.3s;
        }

            .btn-outline-secondary:hover {
                background: #f8f9fa;
                color: var(--secondary-color);
                transform: translateY(-1px);
            }

        /* Ensure Login and Register have identical size */
        .action-btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            min-width: 160px;
            height: 44px;
            padding: 0 16px;
        }

        .input-group-text {
            background: #f8f9fa;
            border-radius: 8px 0 0 8px !important;
            font-size: 0.9rem;
            padding: 0.65rem 0.75rem;
        }

        .validation-error {
            font-size: 0.75rem;
            color: var(--danger-color);
            margin-top: 0.25rem;
        }

        .password-toggle {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            color: #6c757d;
            font-size: 0.9rem;
        }

        .password-strength {
            height: 4px;
            margin-top: 5px;
            border-radius: 2px;
            transition: all 0.3s;
        }

        .otp-container {
            display: none;
            margin-top: 1rem;
            padding: 1rem;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #e0e0e0;
        }

        .otp-input {
            width: 40px;
            height: 40px;
            text-align: center;
            font-size: 1rem;
            margin: 0 3px;
            border-radius: 6px;
            border: 1px solid #e0e0e0;
            padding: 0.5rem;
        }

        .otp-timer {
            color: var(--danger-color);
            font-size: 0.8rem;
            margin-top: 0.5rem;
        }

        .otp-success {
            color: #198754; /* Bootstrap success green */
            font-weight: 600;
        }

        .alert {
            font-size: 0.85rem;
            padding: 0.75rem 1rem;
        }

        /* Small devices (landscape phones, 576px and up) */
        @@media (min-width: 576px) {
            .auth-container {
                margin: 1.5rem;
            }
            .auth-header {
                padding: 1.75rem;
            }
            .auth-body {
                padding: 1.75rem;
            }
        }

        /* Medium devices (tablets, 768px and up) */
        @@media (min-width: 768px) {
            .auth-header h2 {
                font-size: 1.75rem;
            }
            .section-title {
                font-size: 1.25rem;
            }
            .form-label {
                font-size: 1rem;
            }
            .form-control, .form-select {
                padding: 0.75rem 1rem;
                font-size: 1rem;
            }
            .btn {
                padding: 0.75rem 1.5rem;
                font-size: 1rem;
            }
            .input-group-text {
                font-size: 1rem;
                padding: 0.75rem 0.9rem;
            }
            .otp-input {
                width: 45px;
                height: 45px;
                margin: 0 4px;
            }
        }

        /* Large devices (desktops, 992px and up) */
        @@media (min-width: 992px) {
            .auth-container {
                margin: 2rem auto;
            }
            .auth-header {
                padding: 2rem;
            }
            .auth-body {
                padding: 2rem;
            }
            .auth-header h2 {
                font-size: 2rem;
            }
        }

        /* Extra small devices (portrait phones, less than 576px) */
        @@media (max-width: 575.98px) {
            body {
                padding: 0.5rem;
            }
            .auth-container {
                border-radius: 12px;
            }
            .auth-header {
                padding: 1.25rem;
            }
            .auth-body {
                padding: 1.25rem;
            }
            .otp-input {
                width: 35px;
                height: 35px;
                margin: 0 2px;
                font-size: 0.9rem;
            }
            .form-actions {
                flex-direction: column;
                gap: 1rem;
            }
            .form-actions .btn {
                width: 100%;
            }
        }

        /* Special handling for very small devices */
        @@media (max-width: 400px) {
            .otp-input {
                width: 30px;
                height: 30px;
                margin: 0 1px;
                font-size: 0.8rem;
            }
            .auth-header h2 {
                font-size: 1.3rem;
            }
            .section-title {
                font-size: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="auth-container">
        <div class="auth-header">
            <h2><i class="fas fa-user-plus me-2"></i>Create Your Account</h2>
            <p>Join our community today</p>
        </div>

        <div class="auth-body">
            @if (ViewBag.Message != null)
            {
                <div class="alert alert-info alert-dismissible fade show mb-4">
                    @ViewBag.Message
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
            <div class="d-flex flex-wrap gap-2 mb-3">
                <a class="btn btn-sm btn-outline-secondary" href="@Url.Action("Login", "Account", new { returnUrl = Url.Action("Announcements", "Content") })">
                    <i class="fa fa-bullhorn me-1"></i> Go to Announcements
                </a>

                <a class="btn btn-sm btn-outline-secondary" href="@Url.Action("Login", "Account", new { returnUrl = Url.Action("Events", "Content") })">
                    <i class="fa fa-calendar me-1"></i> Go to Events
                </a>
            </div>
            @using (Html.BeginForm("Index", "Register", FormMethod.Post, new { id = "registerForm", enctype = "multipart/form-data", @accept_charset = "utf-8", name = "registerForm" }))
            {
                @Html.AntiForgeryToken()

                <!-- Personal Information Section -->
                <div class="form-section">
                    <h4 class="section-title">Personal Information</h4>
                    <div class="row g-2">
                        <div class="col-12 col-md-6">
                            <label class="form-label">First Name *</label>
                            @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", placeholder = "Enter First Name", required = "required" })
                            @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "validation-error" })
                        </div>
                        <div class="col-12 col-md-6">
                            <label class="form-label">Last Name *</label>
                            @Html.TextBoxFor(m => m.LastName, new { @class = "form-control", placeholder = "Enter Last Name", required = "required" })
                            @Html.ValidationMessageFor(m => m.LastName, "", new { @class = "validation-error" })
                        </div>
                        <div class="col-12 col-md-6">
                            <label class="form-label">Date of Birth *</label>
                            @Html.TextBoxFor(m => m.DOB, new { @class = "form-control", type = "date", max = DateTime.Now.AddDays(-1).ToString("yyyy-MM-dd"), required = "required" })
                            @Html.ValidationMessageFor(m => m.DOB, "", new { @class = "validation-error" })
                        </div>
                        <div class="col-12 col-md-6">
                            <label class="form-label">Gender *</label>
                            @Html.DropDownListFor(m => m.Gender,
                                new SelectList(new List<string> { "Male", "Female" }),
                                "Select Gender",
                                new { @class = "form-select", required = "required" })
                            @Html.ValidationMessageFor(m => m.Gender, "", new { @class = "validation-error" })
                        </div>
                    </div>
                </div>

                <!-- Account Information Section -->
                <div class="form-section">
                    <h4 class="section-title">Account Information</h4>
                    <div class="row g-2">
                        <div class="col-12 col-md-6">
                            <label class="form-label">Username *</label>
                            @Html.TextBoxFor(m => m.UserName, new { @class = "form-control", placeholder = "Enter Username", required = "required" })
                            @Html.ValidationMessageFor(m => m.UserName, "", new { @class = "validation-error" })
                        </div>
                        <div class="col-12 col-md-6">
                            <label class="form-label">Email Address *</label>
                            <div class="input-group">
                                @Html.TextBoxFor(m => m.Email, new { @class = "form-control", type = "email", placeholder = "Enter Email Address", required = "required", id = "emailField" })
                            </div>
                            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "validation-error" })
                        </div>
                        <div class="col-12 col-md-6">
                            <label class="form-label">Password *</label>
                            <div class="position-relative">
                                @Html.PasswordFor(m => m.Password, new { @class = "form-control", placeholder = "Enter Password", required = "required", id = "passwordField", minlength = "6" })
                                <i class="fas fa-eye password-toggle" id="togglePassword"></i>
                            </div>
                            <div class="password-strength" id="passwordStrength"></div>
                            @Html.ValidationMessageFor(m => m.Password, "", new { @class = "validation-error" })
                            <small class="text-muted">Minimum 6 characters</small>
                        </div>
                        <div class="col-12 col-md-6">
                            <label class="form-label">Confirm Password *</label>
                            <div class="position-relative">
                                @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", placeholder = "Confirm Password", required = "required", id = "confirmPasswordField" })
                                <i class="fas fa-eye password-toggle" id="toggleConfirmPassword"></i>
                            </div>
                            @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "validation-error" })
                        </div>
                        <div class="col-12 col-md-6">
                            <label class="form-label">Mobile Number *</label>
                            <div class="input-group">
                                <span class="input-group-text">+91</span>
                                @Html.TextBoxFor(m => m.MobileNo, new
                                {
                                    @class = "form-control",
                                    placeholder = "Enter Mobile Number",
                                    maxlength = "10",
                                    pattern = @"[0-9]{10}",
                                    title = "Please enter a valid 10-digit mobile number",
                                    required = "required",
                                    id = "mobileNumber"
                                })
                                <button type="button" class="btn btn-outline-primary" id="sendOtpBtn">
                                    <span id="sendOtpText">Send OTP</span>
                                    <span id="sendOtpSpinner" class="spinner-border spinner-border-sm d-none" role="status"></span>
                                </button>
                            </div>
                            @Html.ValidationMessageFor(m => m.MobileNo, "", new { @class = "validation-error" })
                        </div>
                        <div class="col-12 col-md-6">
                            <div class="otp-container" id="otpContainer">
                                <div class="mb-2">
                                    <label class="form-label">Enter OTP *</label>
                                    <div class="d-flex justify-content-center mb-2">
                                        <input type="text" class="form-control otp-input" maxlength="1" data-index="1">
                                        <input type="text" class="form-control otp-input" maxlength="1" data-index="2">
                                        <input type="text" class="form-control otp-input" maxlength="1" data-index="3">
                                        <input type="text" class="form-control otp-input" maxlength="1" data-index="4">
                                        <input type="text" class="form-control otp-input" maxlength="1" data-index="5">
                                        <input type="text" class="form-control otp-input" maxlength="1" data-index="6">
                                    </div>
                                    <input type="hidden" id="otp" name="otp" />
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="d-flex gap-2">
                                            <button type="button" class="btn btn-primary btn-sm" id="verifyOtpBtn">Verify OTP</button>
                                            <button type="button" class="btn btn-outline-secondary btn-sm" id="resendOtpBtn" disabled>Resend OTP</button>
                                        </div>
                                        <span class="otp-timer" id="otpTimer"></span>
                                    </div>
                                    <div id="otpError" class="validation-error mt-2"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Membership Type Section -->
                <div class="form-section">
                    <h4 class="section-title">Membership Details</h4>
                    <div class="row g-2">
                        <div class="col-12">
                            <label class="form-label">Membership Type *</label>
                            <select class="form-select" name="SelectedMemberTypeId" id="membershipTypeDropdown" required>
                                <option value="">-- Select Membership Type --</option>
                                @foreach (var type in ViewBag.MemberTypes as SelectList)
                                {
                                    <option value="@type.Value">@type.Text</option>
                                }
                            </select>
                            <span class="validation-error" id="membershipTypeValidation"></span>
                        </div>
                    </div>
                </div>

                <!-- Government Proof Upload Section -->
                <div class="form-section">
                    <h4 class="section-title">Government Proof</h4>
                    <div class="row g-2">
                        <div class="col-12">
                            <label class="form-label">Upload Government Proof (PDF/JPG/PNG)</label>
                            <input type="file" name="GovernmentProofFile" id="GovernmentProofFile" class="form-control" accept=".pdf,.jpg,.jpeg,.png" />
                            @Html.ValidationMessage("GovernmentProofFile", "", new { @class = "validation-error" })
                        </div>
                    </div>
                </div>

                <!-- Form Actions -->
                <div class="d-flex flex-column flex-md-row justify-content-between align-items-center mt-4 gap-2">
                    <a href="@Url.Action("Login", "Account")" class="btn btn-outline-primary action-btn order-md-1 order-2">
                        <i class="fas fa-arrow-left me-2"></i> Login
                    </a>
                    <div class="d-flex flex-column flex-md-row gap-2 w-100 w-md-auto order-md-2 order-1">
                        <button type="submit" class="btn btn-primary action-btn" id="registerBtn" disabled>
                            <i class="fas fa-user-plus me-2"></i>Register
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")

        <script>
            $(document).ready(function() {
                // Immediate DOB validation: must be earlier than today (not today or future)
                (function() {
                    const $dob = $('#DOB'); // default id generated by Html.TextBoxFor
                    function validateDob() {
                        const v = $dob.val();
                        if (!v) { $dob[0].setCustomValidity(''); return; }
                        // Normalize to local midnight to avoid TZ issues
                        const dob = new Date(v + 'T00:00:00');
                        const today = new Date();
                        today.setHours(0, 0, 0, 0);
                        if (dob >= today) {
                            $dob[0].setCustomValidity('Date of Birth must be earlier than today.');
                        } else {
                            $dob[0].setCustomValidity('');
                        }
                        // Trigger UI feedback immediately
                        if (typeof $dob[0].reportValidity === 'function') {
                            $dob[0].reportValidity();
                        }
                    }
                    $dob.on('change input blur', validateDob);
                    validateDob();
                })();
                let otpTimerInterval;
                let isOtpVerified = false;

                // Password strength indicator
                const updatePasswordStrength = function() {
                    const password = $('#passwordField').val();
                    const strengthBar = $('#passwordStrength');
                    let strength = 0;

                    if (password.length >= 6) strength += 1;
                    if (password.length >= 8) strength += 1;
                    if (/[A-Z]/.test(password)) strength += 1;
                    if (/[0-9]/.test(password)) strength += 1;
                    if (/[^A-Za-z0-9]/.test(password)) strength += 1;

                    strengthBar.css({
                        'width': (strength * 20) + '%',
                        'background-color': strength < 2 ? '#f72585' :
                                            strength < 4 ? '#f8961e' : '#4cc9f0'
                    });
                };

                // Toggle password visibility
                const togglePasswordVisibility = function(fieldId, iconId) {
                    const field = $(fieldId);
                    const icon = $(iconId);
                    const type = field.attr('type') === 'password' ? 'text' : 'password';
                    field.attr('type', type);
                    icon.toggleClass('fa-eye fa-eye-slash');
                };

                // Handle membership type selection
                $('#membershipTypeDropdown').change(function() {
                    if ($(this).val() === "") {
                        $('#membershipTypeValidation').text('Please select a membership type');
                    } else {
                        $('#membershipTypeValidation').text('');
                    }
                });

                // Start OTP timer
                function startOtpTimer(duration, display) {
                    let timer = duration, minutes, seconds;
                    clearInterval(otpTimerInterval);

                    otpTimerInterval = setInterval(function () {
                        minutes = parseInt(timer / 60, 10);
                        seconds = parseInt(timer % 60, 10);

                        minutes = minutes < 10 ? "0" + minutes : minutes;
                        seconds = seconds < 10 ? "0" + seconds : seconds;

                        display.text("Expires in: " + minutes + ":" + seconds);

                        if (--timer < 0) {
                            clearInterval(otpTimerInterval);
                            display.text("OTP expired");
                            $('#verifyOtpBtn').prop('disabled', true);
                            $('#resendOtpBtn').prop('disabled', false);
                        }
                    }, 1000);
                }

                // Send OTP
                $('#sendOtpBtn').click(function() {
                    const mobileNumber = $('#mobileNumber').val().trim();
                    const btn = $(this);
                    const spinner = $('#sendOtpSpinner');
                    const text = $('#sendOtpText');

                    // Validate mobile number
                    if (!mobileNumber || !/^[0-9]{10}$/.test(mobileNumber)) {
                        alert('Please enter a valid 10-digit mobile number');
                        return;
                    }

                    // Disable button and show spinner
                    btn.prop('disabled', true);
                    text.text('Sending...');
                    spinner.removeClass('d-none');

                    // Get anti-forgery token
                    const token = $('input[name="__RequestVerificationToken"]').val();

                    // Make AJAX call
                    $.ajax({
                        url: '@Url.Action("SendOtp", "Register")',
                        type: 'POST',
                        headers: {
                            'RequestVerificationToken': token
                        },
                        data: {
                            mobileNumber: mobileNumber,
                            __RequestVerificationToken: token
                        },
                        success: function(response) {
                            if (response.success) {
                                $('#otpContainer').show();
                                $('#otpError').text('');
                                startOtpTimer(120, $('#otpTimer')); // 2 minutes
                                $('#verifyOtpBtn').prop('disabled', false);
                                $('#resendOtpBtn').prop('disabled', true);
                                alert('OTP sent successfully to your mobile number');
                            } else {
                                alert(response.message || 'Failed to send OTP');
                            }
                        },
                        error: function(xhr, status, error) {
                            alert('Error sending OTP. Please try again.');
                        },
                        complete: function() {
                            btn.prop('disabled', false);
                            text.text('Send OTP');
                            spinner.addClass('d-none');
                        }
                    });
                });

                // Resend OTP
                $('#resendOtpBtn').click(function() {
                    const mobileNumber = $('#mobileNumber').val().trim();
                    if (!mobileNumber || !/^[0-9]{10}$/.test(mobileNumber)) {
                        alert('Please enter a valid 10-digit mobile number');
                        return;
                    }

                    const token = $('input[name="__RequestVerificationToken"]').val();
                    const btn = $(this);
                    btn.prop('disabled', true).text('Resending...');

                    $.ajax({
                        url: '@Url.Action("SendOtp", "Register")',
                        type: 'POST',
                        headers: { 'RequestVerificationToken': token },
                        data: { mobileNumber: mobileNumber, __RequestVerificationToken: token },
                        success: function(response) {
                            if (response.success) {
                                $('#otpContainer').show();
                                $('#otpError').text('');
                                $('.otp-input').val('');
                                startOtpTimer(120, $('#otpTimer'));
                                $('#verifyOtpBtn').prop('disabled', false);
                                alert('OTP resent successfully');
                            } else {
                                alert(response.message || 'Failed to resend OTP');
                                btn.prop('disabled', false).text('Resend OTP');
                            }
                        },
                        error: function() {
                            alert('Error resending OTP. Please try again.');
                            btn.prop('disabled', false).text('Resend OTP');
                        },
                        complete: function() {
                            btn.text('Resend OTP');
                        }
                    });
                });

                // Verify OTP
                $('#verifyOtpBtn').click(function() {
                    const mobileNumber = $('#mobileNumber').val();
                    let otp = '';

                    $('.otp-input').each(function() {
                        otp += $(this).val();
                    });

                    if (otp.length !== 6) {
                        $('#otpError').text('Please enter a 6-digit OTP');
                        return;
                    }

                    $(this).prop('disabled', true);
                    $(this).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Verifying...');

                    // Get anti-forgery token
                    const token = $('input[name="__RequestVerificationToken"]').val();

                    $.ajax({
                        url: '@Url.Action("VerifyOtp", "Register")',
                        type: 'POST',
                        headers: {
                            'RequestVerificationToken': token
                        },
                        data: {
                            mobileNumber: mobileNumber,
                            otp: otp,
                            __RequestVerificationToken: token
                        },
                        success: function(response) {
                            if (response.success) {
                                $('#otpError').text('');
                                $('#otp').val(otp);
                                clearInterval(otpTimerInterval);
                                $('#otpTimer').text('Mobile OTP verified successfully').addClass('otp-success');
                                $('#verifyOtpBtn').html('<i class="fas fa-check-circle me-2"></i>Verified');
                                $('#registerBtn').prop('disabled', false);
                                isOtpVerified = true;
                            } else {
                                $('#otpError').text(response.message);
                                $('#verifyOtpBtn').prop('disabled', false);
                                $('#verifyOtpBtn').html('Verify OTP');
                            }
                        },
                        error: function(xhr, status, error) {
                            alert('Error verifying OTP. Please try again.');
                            $('#verifyOtpBtn').prop('disabled', false);
                            $('#verifyOtpBtn').html('Verify OTP');
                        }
                    });
                });

                // OTP input auto-focus
                $('.otp-input').keyup(function() {
                    const index = $(this).data('index');
                    const value = $(this).val();

                    if (value.length === 1 && index < 6) {
                        $('.otp-input[data-index="' + (index + 1) + '"]').focus();
                    }
                });

                // Form validation
                const validateForm = function(e) {
                    // Government proof file validation (if provided)
                    const fileInput = document.getElementById('GovernmentProofFile');
                    if (fileInput) {
                        fileInput.setCustomValidity('');
                        if (fileInput.files && fileInput.files.length > 0) {
                            const name = fileInput.files[0].name || '';
                            const ext = name.substring(name.lastIndexOf('.')).toLowerCase();
                            const allowed = ['.pdf', '.jpg', '.jpeg', '.png'];
                            if (allowed.indexOf(ext) === -1) {
                                e.preventDefault();
                                const msg = 'Please submit the correct proof (PDF, JPG, JPEG, PNG).';
                                fileInput.setCustomValidity(msg);
                                if (typeof fileInput.reportValidity === 'function') fileInput.reportValidity();
                                alert(msg);
                                fileInput.focus();
                                return false;
                            }
                        }
                    }
                    if ($('#passwordField').val() !== $('#confirmPasswordField').val()) {
                        e.preventDefault();
                        alert('Passwords do not match!');
                        $('#confirmPasswordField').focus();
                        return false;
                    }

                    if ($('#membershipTypeDropdown').val() === "") {
                        e.preventDefault();
                        alert('Please select a membership type');
                        $('#membershipTypeDropdown').focus();
                        return false;
                    }

                    if (!isOtpVerified) {
                        e.preventDefault();
                        alert('Please verify your mobile number with OTP');
                        $('#sendOtpBtn').focus();
                        return false;
                    }

                    if (!this.checkValidity()) {
                        e.preventDefault();
                        e.stopPropagation();
                    }

                    $(this).addClass('was-validated');
                };

                // Mobile number validation
                const validateMobileNumber = function() {
                    this.value = this.value.replace(/[^0-9]/g, '').slice(0, 10);
                };

                // Event bindings
                $('#passwordField').on('input', updatePasswordStrength);
                $('#togglePassword').click(() => togglePasswordVisibility('#passwordField', '#togglePassword'));
                $('#toggleConfirmPassword').click(() => togglePasswordVisibility('#confirmPasswordField', '#toggleConfirmPassword'));
                $('#registerForm').submit(validateForm);
                // Clear file custom validity on change
                $('#GovernmentProofFile').on('change', function(){
                    this.setCustomValidity('');
                });
                $('#MobileNo').on('input', validateMobileNumber);

                // Initialize membership type if preselected
                if ($('#membershipTypeDropdown').val()) {
                    $('#membershipTypeDropdown').trigger('change');
                }
            });
        </script>
    }
</body>
</html>