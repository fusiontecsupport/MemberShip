@model IEnumerable<ClubMembership.Models.GalleryMaster>

@{
    ViewBag.Title = "Gallery";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .hero {
        position: relative;
        background: linear-gradient(135deg, #eef4ff 0%, #f7fbff 40%, #ecf7ff 100%);
        border: 1px solid #e7edf6;
        border-radius: .9rem;
        padding: 1rem 1rem;
        overflow: hidden;
        box-shadow: 0 6px 18px rgba(31, 98, 221, 0.06);
    }
    .hero:before {
        content: "";
        position: absolute;
        right: -60px;
        top: -60px;
        width: 220px;
        height: 220px;
        background: radial-gradient(closest-side, rgba(76, 130, 254, .18), transparent);
        filter: blur(2px);
        border-radius: 50%;
        pointer-events: none;
    }
    
    .gallery-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
        margin-top: 1.5rem;
    }
    
    .gallery-card {
        background: #fff;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        overflow: hidden;
        transition: all 0.3s ease;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        cursor: pointer;
    }
    
    .gallery-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }
    
    .gallery-image {
        width: 100%;
        height: 200px;
        object-fit: cover;
        background: #f8f9fa;
    }
    
    .gallery-content {
        padding: 1rem;
    }
    
    .gallery-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 0.5rem;
        line-height: 1.3;
    }
    
    .gallery-caption {
        color: #6c757d;
        font-size: 0.9rem;
        line-height: 1.4;
        margin-bottom: 0.75rem;
    }
    
    .gallery-meta {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 0.8rem;
        color: #adb5bd;
    }
    
    .gallery-date {
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }
    
    .gallery-category {
        background: #e9ecef;
        color: #495057;
        padding: 0.25rem 0.5rem;
        border-radius: 12px;
        font-size: 0.75rem;
    }
    
    .empty-state {
        text-align: center;
        padding: 3rem 1rem;
        color: #6c757d;
    }
    
    .empty-state i {
        font-size: 3rem;
        margin-bottom: 1rem;
        opacity: 0.5;
    }
    
    .empty-state h4 {
        margin-bottom: 0.5rem;
        color: #495057;
    }
    
    .empty-state p {
        margin-bottom: 0;
        opacity: 0.8;
    }
    
    .search-box {
        max-width: 400px;
        margin-bottom: 1rem;
    }
    
    .search-box .form-control {
        border-radius: 25px;
        padding-left: 1rem;
        padding-right: 1rem;
    }
    
    .search-box .input-group-text {
        background: transparent;
        border: none;
        position: absolute;
        right: 0;
        z-index: 10;
        color: #6c757d;
    }

    /* Modal Styles */
    .gallery-modal {
        display: none;
        position: fixed;
        z-index: 9999;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.9);
        backdrop-filter: blur(5px);
    }

    .gallery-modal-content {
        position: relative;
        margin: auto;
        padding: 20px;
        width: 95%;
        max-width: 800px;
        height: 95%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        overflow-y: auto;
    }

    .gallery-modal-close {
        position: absolute;
        top: 15px;
        right: 35px;
        color: #f1f1f1;
        font-size: 40px;
        font-weight: bold;
        cursor: pointer;
        z-index: 10000;
    }

    .gallery-modal-close:hover,
    .gallery-modal-close:focus {
        color: #bbb;
        text-decoration: none;
    }

    .gallery-modal-header {
        width: 100%;
        text-align: center;
        margin-bottom: 20px;
        color: white;
    }

    .gallery-modal-title {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .gallery-modal-caption {
        font-size: 16px;
        opacity: 0.8;
    }

    /* Carousel Styles */
    .gallery-carousel {
        width: 100%;
        max-width: 600px;
        position: relative;
    }

    .carousel-container {
        position: relative;
        overflow: hidden;
        border-radius: 12px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.3);
    }

    .carousel-slide {
        display: none;
        width: 100%;
        height: 400px;
    }

    .carousel-slide.active {
        display: block;
    }

    .carousel-slide img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .carousel-nav {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background: rgba(0,0,0,0.7);
        color: white;
        border: none;
        padding: 15px 12px;
        cursor: pointer;
        font-size: 18px;
        border-radius: 50%;
        transition: all 0.3s ease;
        z-index: 1000;
    }

    .carousel-nav:hover {
        background: rgba(0,0,0,0.9);
        transform: translateY(-50%) scale(1.1);
    }

    .carousel-prev {
        left: 10px;
    }

    .carousel-next {
        right: 10px;
    }

    .carousel-indicators {
        display: flex;
        justify-content: center;
        margin-top: 20px;
        gap: 10px;
    }

    .carousel-indicator {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background: rgba(255,255,255,0.5);
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .carousel-indicator.active {
        background: white;
        transform: scale(1.2);
    }

    .carousel-counter {
        color: white;
        text-align: center;
        margin-top: 15px;
        font-size: 14px;
        opacity: 0.8;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .gallery-modal-content {
            width: 98%;
            height: 98%;
            padding: 15px;
        }
        
        .gallery-modal-title {
            font-size: 20px;
        }
        
        .gallery-modal-caption {
            font-size: 14px;
        }
        
        .carousel-slide {
            height: 300px;
        }
        
        .carousel-nav {
            padding: 12px 10px;
            font-size: 16px;
        }
        
        .gallery-grid {
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1rem;
        }
    }
</style>

<div class="container-fluid">
    <div class="hero mb-4">
        <div class="d-flex flex-column flex-md-row gap-3 align-items-md-center justify-content-between">
            <div class="d-flex align-items-center gap-3">
                <span class="d-inline-flex align-items-center justify-content-center rounded-circle" style="width:48px;height:48px;background:#e8f0ff;color:#2a6df6">
                    <i class="fa fa-images"></i>
                </span>
                <div>
                    <h4 class="mb-1">Gallery</h4>
                    <small class="text-muted">Browse through our collection of images and memories</small>
                </div>
            </div>
        </div>
    </div>

    @if (Model != null && Model.Any())
    {
        <div class="search-box">
            <div class="input-group">
                <input type="text" id="gallerySearch" class="form-control" placeholder="Search gallery items..." />
                <span class="input-group-text">
                    <i class="fa fa-search"></i>
                </span>
            </div>
        </div>

        <div class="gallery-grid" id="galleryGrid">
            @foreach (var item in Model)
            {
                var imageSrc = "";
                if (!string.IsNullOrWhiteSpace(item.MainImage))
                {
                    if (item.MainImage.StartsWith("/Uploads/"))
                    {
                        imageSrc = Url.Content("~" + item.MainImage);
                    }
                    else if (item.MainImage.StartsWith("~"))
                    {
                        imageSrc = Url.Content(item.MainImage);
                    }
                    else if (item.MainImage.StartsWith("http", StringComparison.OrdinalIgnoreCase))
                    {
                        imageSrc = item.MainImage;
                    }
                    else
                    {
                        imageSrc = Url.Content("~/" + item.MainImage.TrimStart('/'));
                    }
                }
                
                                 <div class="gallery-card" 
                      data-title="@(item.Heading != null ? item.Heading.ToLower() : "")" 
                      data-caption="@(item.Caption != null ? item.Caption.ToLower() : "")" 
                      data-category="@(item.Category != null ? item.Category.ToLower() : "")"
                      data-main-image="@imageSrc"
                      data-additional-images="@(item.AdditionalImages ?? "")"
                      onclick="openGalleryModal(this)">
                    <div class="gallery-image-container">
                        @if (!string.IsNullOrEmpty(imageSrc))
                        {
                            <img src="@imageSrc" alt="@item.Heading" class="gallery-image" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                            <div class="gallery-image-placeholder" style="display:none; width:100%; height:200px; background:#f8f9fa; align-items:center; justify-content:center; color:#adb5bd;">
                                <i class="fa fa-image"></i>
                            </div>
                        }
                        else
                        {
                            <div class="gallery-image-placeholder" style="width:100%; height:200px; background:#f8f9fa; display:flex; align-items:center; justify-content:center; color:#adb5bd;">
                                <i class="fa fa-image"></i>
                            </div>
                        }
                    </div>
                    <div class="gallery-content">
                        <h5 class="gallery-title">@item.Heading</h5>
                        @if (!string.IsNullOrEmpty(item.Caption))
                        {
                            <p class="gallery-caption">@item.Caption</p>
                        }
                        <div class="gallery-meta">
                            <div class="gallery-date">
                                <i class="fa fa-calendar"></i>
                                <span>@item.CreatedDate.ToString("dd MMM yyyy")</span>
                            </div>
                            @if (!string.IsNullOrEmpty(item.Category))
                            {
                                <span class="gallery-category">@item.Category</span>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-state">
            <i class="fa fa-images"></i>
            <h4>No Gallery Items</h4>
            <p>There are no gallery items available at the moment.</p>
        </div>
    }
</div>

<!-- Gallery Modal -->
<div id="galleryModal" class="gallery-modal">
    <div class="gallery-modal-content">
        <span class="gallery-modal-close" onclick="closeGalleryModal()">&times;</span>
        
        <div class="gallery-modal-header">
            <div class="gallery-modal-title" id="modalTitle"></div>
            <div class="gallery-modal-caption" id="modalCaption"></div>
        </div>

        <div class="gallery-carousel">
            <div class="carousel-container">
                <div id="carouselSlides"></div>
            </div>
            
            <button class="carousel-nav carousel-prev" onclick="changeSlide(-1)">&#10094;</button>
            <button class="carousel-nav carousel-next" onclick="changeSlide(1)">&#10095;</button>
            
            <div class="carousel-indicators" id="carouselIndicators"></div>
            <div class="carousel-counter" id="carouselCounter"></div>
        </div>
    </div>
</div>

<script>
    let currentSlide = 0;
    let slides = [];
    let additionalImages = [];

    // Gallery search functionality
    document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.getElementById('gallerySearch');
        const galleryGrid = document.getElementById('galleryGrid');
        
        if (searchInput && galleryGrid) {
            searchInput.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase().trim();
                const galleryCards = galleryGrid.querySelectorAll('.gallery-card');
                
                galleryCards.forEach(function(card) {
                    const title = card.getAttribute('data-title') || '';
                    const caption = card.getAttribute('data-caption') || '';
                    const category = card.getAttribute('data-category') || '';
                    
                    const matches = title.includes(searchTerm) || 
                                  caption.includes(searchTerm) || 
                                  category.includes(searchTerm);
                    
                    card.style.display = matches ? 'block' : 'none';
                });
                
                // Show/hide empty state if no results
                const visibleCards = galleryGrid.querySelectorAll('.gallery-card[style*="display: none"]');
                if (visibleCards.length === galleryCards.length) {
                    // All cards are hidden, show empty state
                    if (!document.querySelector('.no-results-state')) {
                        const noResults = document.createElement('div');
                        noResults.className = 'empty-state no-results-state';
                        noResults.innerHTML = `
                            <i class="fa fa-search"></i>
                            <h4>No Results Found</h4>
                            <p>Try adjusting your search terms.</p>
                        `;
                        galleryGrid.appendChild(noResults);
                    }
                } else {
                    // Some cards are visible, hide empty state
                    const noResults = document.querySelector('.noResults-state');
                    if (noResults) {
                        noResults.remove();
                    }
                }
            });
        }
    });

    function openGalleryModal(cardElement) {
        const modal = document.getElementById('galleryModal');
        const modalTitle = document.getElementById('modalTitle');
        const modalCaption = document.getElementById('modalCaption');
        const carouselSlides = document.getElementById('carouselSlides');
        const carouselIndicators = document.getElementById('carouselIndicators');
        const carouselCounter = document.getElementById('carouselCounter');

        // Get data from the card element
        const title = cardElement.querySelector('.gallery-title').textContent || '';
        const caption = cardElement.querySelector('.gallery-caption') ? cardElement.querySelector('.gallery-caption').textContent : '';
        const mainImage = cardElement.getAttribute('data-main-image') || '';
        const additionalImagesStr = cardElement.getAttribute('data-additional-images') || '';
        
        console.log('Modal data:', { title, caption, mainImage, additionalImagesStr });

        // Set modal content
        modalTitle.textContent = title;
        modalCaption.textContent = caption;

        // Parse additional images
        additionalImages = [];
        if (additionalImagesStr && additionalImagesStr.trim() !== '') {
            const imagePaths = additionalImagesStr.split(',').map(img => img.trim()).filter(img => img !== '');
            additionalImages = imagePaths.map(img => {
                let processedImg = img;
                if (img && img.startsWith("/Uploads/")) {
                    processedImg = img; // Already processed by Razor
                } else if (img && img.startsWith("~")) {
                    processedImg = img; // Already processed by Razor
                } else if (img && img.toLowerCase().startsWith("http")) {
                    processedImg = img;
                } else if (img) {
                    processedImg = img; // Already processed by Razor
                }
                return processedImg;
            });
        }

        // Create slides array starting with main image
        slides = [];
        if (mainImage && mainImage.trim() !== '') {
            slides.push(mainImage);
        }
        if (additionalImages.length > 0) {
            slides = slides.concat(additionalImages);
        }

        // If no images, show placeholder
        if (slides.length === 0) {
            slides = ['/Content/Images/no-image.png'];
        }

        // Build carousel slides
        carouselSlides.innerHTML = '';
        console.log('Building carousel with slides:', slides);
        slides.forEach((imageSrc, index) => {
            const slide = document.createElement('div');
            slide.className = `carousel-slide ${index === 0 ? 'active' : ''}`;
            
            if (imageSrc && imageSrc.trim() !== '') {
                slide.innerHTML = `<img src="${imageSrc}" alt="${title}" onerror="this.style.display='none'; this.parentElement.innerHTML='<div style=\'display:flex;align-items:center;justify-content:center;height:100%;color:#fff;font-size:18px;\'>Image not available</div>';" onload="console.log('Image loaded:', imageSrc);" />`;
            } else {
                slide.innerHTML = '<div style="display:flex;align-items:center;justify-content:center;height:100%;color:#fff;font-size:18px;">No image available</div>';
            }
            
            carouselSlides.appendChild(slide);
        });

        // Build carousel indicators
        carouselIndicators.innerHTML = '';
        slides.forEach((_, index) => {
            const indicator = document.createElement('div');
            indicator.className = `carousel-indicator ${index === 0 ? 'active' : ''}`;
            indicator.onclick = () => goToSlide(index);
            carouselIndicators.appendChild(indicator);
        });

        // Reset to first slide
        currentSlide = 0;
        updateCarousel();

        // Show modal
        modal.style.display = 'block';
        document.body.style.overflow = 'hidden';
    }

    function closeGalleryModal() {
        const modal = document.getElementById('galleryModal');
        modal.style.display = 'none';
        document.body.style.overflow = 'auto';
    }

    function changeSlide(direction) {
        currentSlide += direction;
        if (currentSlide >= slides.length) currentSlide = 0;
        if (currentSlide < 0) currentSlide = slides.length - 1;
        updateCarousel();
    }

    function goToSlide(index) {
        currentSlide = index;
        updateCarousel();
    }

    function updateCarousel() {
        // Update slides
        const slideElements = document.querySelectorAll('.carousel-slide');
        slideElements.forEach((slide, index) => {
            slide.classList.toggle('active', index === currentSlide);
        });

        // Update indicators
        const indicators = document.querySelectorAll('.carousel-indicator');
        indicators.forEach((indicator, index) => {
            indicator.classList.toggle('active', index === currentSlide);
        });

        // Update counter
        const counter = document.getElementById('carouselCounter');
        counter.textContent = `${currentSlide + 1} of ${slides.length}`;
    }

    // Close modal when clicking outside
    window.onclick = function(event) {
        const modal = document.getElementById('galleryModal');
        if (event.target === modal) {
            closeGalleryModal();
        }
    }

    // Keyboard navigation
    document.addEventListener('keydown', function(event) {
        if (document.getElementById('galleryModal').style.display === 'block') {
            if (event.key === 'Escape') {
                closeGalleryModal();
            } else if (event.key === 'ArrowLeft') {
                changeSlide(-1);
            } else if (event.key === 'ArrowRight') {
                changeSlide(1);
            }
        }
    });

    // Touch support for mobile devices
    let touchStartX = 0;
    let touchEndX = 0;

    document.addEventListener('touchstart', function(event) {
        if (document.getElementById('galleryModal').style.display === 'block') {
            touchStartX = event.changedTouches[0].screenX;
        }
    });

    document.addEventListener('touchend', function(event) {
        if (document.getElementById('galleryModal').style.display === 'block') {
            touchEndX = event.changedTouches[0].screenX;
            handleSwipe();
        }
    });

    function handleSwipe() {
        const swipeThreshold = 50;
        const diff = touchStartX - touchEndX;
        
        if (Math.abs(diff) > swipeThreshold) {
            if (diff > 0) {
                // Swipe left - next slide
                changeSlide(1);
            } else {
                // Swipe right - previous slide
                changeSlide(-1);
            }
        }
    }
</script>
