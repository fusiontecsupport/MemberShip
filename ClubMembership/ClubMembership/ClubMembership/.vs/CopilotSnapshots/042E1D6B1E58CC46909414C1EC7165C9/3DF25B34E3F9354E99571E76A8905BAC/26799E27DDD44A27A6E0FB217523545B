@model ClubMembership.Models.AccountViewModels.RegisterViewModel
@{
    ViewBag.Title = "User Registration";
    Layout = "~/Views/Shared/_Login.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>@ViewBag.Title</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #4361ee;
            --secondary-color: #3f37c9;
            --light-color: #f8f9fa;
            --dark-color: #212529;
            --success-color: #4cc9f0;
            --danger-color: #f72585;
        }

        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 1rem;
        }

        .auth-container {
            width: 100%;
            max-width: 900px;
            background: white;
            border-radius: 16px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .auth-header {
            background: var(--primary-color);
            color: white;
            padding: 2rem;
            text-align: center;
        }

            .auth-header h2 {
                font-weight: 600;
                margin-bottom: 0.5rem;
            }

        .auth-body {
            padding: 2.5rem;
        }

        .form-section {
            margin-bottom: 2rem;
        }

        .section-title {
            color: var(--primary-color);
            font-weight: 600;
            margin-bottom: 1.5rem;
            position: relative;
            padding-bottom: 0.5rem;
        }

            .section-title:after {
                content: '';
                position: absolute;
                bottom: 0;
                left: 0;
                width: 50px;
                height: 3px;
                background: var(--primary-color);
                border-radius: 3px;
            }

        .form-label {
            font-weight: 500;
            color: var(--dark-color);
            margin-bottom: 0.5rem;
        }

        .form-control, .form-select {
            padding: 0.75rem 1rem;
            border-radius: 8px;
            border: 1px solid #e0e0e0;
            transition: all 0.3s;
        }

            .form-control:focus, .form-select:focus {
                border-color: var(--primary-color);
                box-shadow: 0 0 0 0.25rem rgba(67, 97, 238, 0.25);
            }

        .btn-primary {
            background: var(--primary-color);
            border: none;
            padding: 0.75rem 2rem;
            font-weight: 500;
            transition: all 0.3s;
        }

            .btn-primary:hover {
                background: var(--secondary-color);
                transform: translateY(-2px);
            }

        .btn-outline-secondary {
            border: 1px solid var(--primary-color);
            color: var(--primary-color);
            padding: 0.75rem 2rem;
            font-weight: 500;
            transition: all 0.3s;
        }

            .btn-outline-secondary:hover {
                background: #f8f9fa;
                color: var(--secondary-color);
            }

        .input-group-text {
            background: #f8f9fa;
            border-radius: 8px 0 0 8px !important;
        }

        .validation-error {
            font-size: 0.85rem;
            color: var(--danger-color);
            margin-top: 0.25rem;
        }

        .password-toggle {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            color: #6c757d;
        }

        .password-strength {
            height: 5px;
            margin-top: 5px;
            border-radius: 3px;
            transition: all 0.3s;
        }

        @@media (max-width: 768px) {
            .auth-body {
                padding: 1.5rem;
            }

            .btn {
                width: 100%;
                margin-bottom: 1rem;
            }

            .d-flex {
                flex-direction: column;
                gap: 1rem;
            }

            .justify-content-between {
                justify-content: flex-start !important;
                gap: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="auth-container">
        <div class="auth-header">
            <h2><i class="fas fa-user-plus me-2"></i>Create Your Account</h2>
            <p>Join our community today</p>
        </div>

        <div class="auth-body">
            @Html.ValidationSummary(true, "", new { @class = "alert alert-danger mb-4" })

            @if (ViewBag.Message != null)
            {
                <div class="alert alert-info alert-dismissible fade show mb-4">
                    @ViewBag.Message
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
        <form action="@Url.Content("~/Account/Login_Register")" method="post" accept-charset="utf-8" id="registerForm" data-ng-controller="myController" name="registerForm">
            @Html.AntiForgeryToken()

            <!-- Personal Information Section -->
            <div class="form-section">
                <h4 class="section-title">Personal Information</h4>
                <div class="row g-3">
                    <div class="col-md-6">
                        <label class="form-label">First Name *</label>
                        @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", placeholder = "Enter First Name", required = "required" })
                        @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "validation-error" })
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Last Name *</label>
                        @Html.TextBoxFor(m => m.LastName, new { @class = "form-control", placeholder = "Enter Last Name", required = "required" })
                        @Html.ValidationMessageFor(m => m.LastName, "", new { @class = "validation-error" })
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Mobile Number *</label>
                        <div class="input-group">
                            <span class="input-group-text">+91</span>
                            @Html.TextBoxFor(m => m.MobileNo, new { @class = "form-control", placeholder = "Enter Mobile Number", maxlength = "10", pattern = @"[0-9]{10}", title = "Please enter a valid 10-digit mobile number", required = "required" })
                        </div>
                        @Html.ValidationMessageFor(m => m.MobileNo, "", new { @class = "validation-error" })
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Date of Birth *</label>
                        @Html.TextBoxFor(m => m.DOB, new { @class = "form-control", type = "date", max = DateTime.Now.ToString("yyyy-MM-dd"), required = "required" })
                        @Html.ValidationMessageFor(m => m.DOB, "", new { @class = "validation-error" })
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Gender *</label>
                        @Html.DropDownListFor(m => m.Gender,
                            new SelectList(new List<string> { "Male", "Female" }),
                            "Select Gender",
                            new { @class = "form-select", required = "required" })
                        @Html.ValidationMessageFor(m => m.Gender, "", new { @class = "validation-error" })
                    </div>
                </div>
            </div>

            <!-- Account Information Section -->
            <div class="form-section">
                <h4 class="section-title">Account Information</h4>
                <div class="row g-3">
                    <div class="col-md-6">
                        <label class="form-label">Username *</label>
                        @Html.TextBoxFor(m => m.UserName, new { @class = "form-control", placeholder = "Enter Username", required = "required" })
                        @Html.ValidationMessageFor(m => m.UserName, "", new { @class = "validation-error" })
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Email Address *</label>
                        @Html.TextBoxFor(m => m.Email, new { @class = "form-control", type = "email", placeholder = "Enter Email Address", required = "required" })
                        @Html.ValidationMessageFor(m => m.Email, "", new { @class = "validation-error" })
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Password *</label>
                        <div class="position-relative">
                            @Html.PasswordFor(m => m.Password, new { @class = "form-control", placeholder = "Enter Password", required = "required", id = "passwordField", minlength = "6" })
                            <i class="fas fa-eye password-toggle" id="togglePassword"></i>
                        </div>
                        <div class="password-strength" id="passwordStrength"></div>
                        @Html.ValidationMessageFor(m => m.Password, "", new { @class = "validation-error" })
                        <small class="text-muted">Minimum 6 characters</small>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Confirm Password *</label>
                        <div class="position-relative">
                            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", placeholder = "Confirm Password", required = "required", id = "confirmPasswordField" })
                            <i class="fas fa-eye password-toggle" id="toggleConfirmPassword"></i>
                        </div>
                        @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "validation-error" })
                    </div>
                </div>
            </div>

            <!-- Form Actions -->
            <div class="d-flex justify-content-between align-items-center mt-5">
                <a href="@Url.Action("Login", "Account")" class="text-decoration-none">
                    <i class="fas fa-arrow-left me-2"></i> Back to Login
                </a>
                <div>
                    <button type="reset" class="btn btn-outline-secondary me-3">
                        <i class="fas fa-redo me-2"></i>Reset
                    </button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-user-plus me-2"></i>Register
                    </button>
                </div>
            </div>
        </form>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Password toggle functionality
        document.getElementById('togglePassword').addEventListener('click', function () {
            const passwordField = document.getElementById('passwordField');
            const type = passwordField.getAttribute('type') === 'password' ? 'text' : 'password';
            passwordField.setAttribute('type', type);
            this.classList.toggle('fa-eye-slash');
        });

        document.getElementById('toggleConfirmPassword').addEventListener('click', function () {
            const confirmPasswordField = document.getElementById('confirmPasswordField');
            const type = confirmPasswordField.getAttribute('type') === 'password' ? 'text' : 'password';
            confirmPasswordField.setAttribute('type', type);
            this.classList.toggle('fa-eye-slash');
        });

        // Password strength indicator
        document.getElementById('passwordField').addEventListener('input', function () {
            const password = this.value;
            const strengthBar = document.getElementById('passwordStrength');
            let strength = 0;

            if (password.length >= 6) strength += 1;
            if (password.length >= 8) strength += 1;
            if (/[A-Z]/.test(password)) strength += 1;
            if (/[0-9]/.test(password)) strength += 1;
            if (/[^A-Za-z0-9]/.test(password)) strength += 1;

            // Update strength bar
            strengthBar.style.width = (strength * 20) + '%';
            strengthBar.style.backgroundColor =
                strength < 2 ? '#f72585' :
                    strength < 4 ? '#f8961e' : '#4cc9f0';
        });

        // Form validation
        (function () {
            'use strict'
            const form = document.getElementById('registerForm');
            form.addEventListener('submit', function (event) {
                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                form.classList.add('was-validated');
            }, false);
        })();

        // Client-side password match validation
        document.getElementById('registerForm').addEventListener('submit', function (e) {
            const password = document.getElementById('passwordField').value;
            const confirmPassword = document.getElementById('confirmPasswordField').value;

            if (password !== confirmPassword) {
                e.preventDefault();
                alert('Passwords do not match!');
                document.getElementById('confirmPasswordField').focus();
            }
        });
    </script>
</body>
</html>